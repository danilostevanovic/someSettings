{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "ll",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},
	"export": {
		"prefix": "ex",
		"body": [
			"export default $1;",
		],
		"description": "export"
	},
	"Create React Class":{
		"prefix":"crc",
		"body": [
			"class $1 extends React.Component{",

				"\t render() {$2 }",
			"}"
		],
		"description": "create react component"
	},
	"Create React Class Constructor":{
		"prefix":"crck",
		"body": [
			"class $1 extends React.Component{",
				"\t constructor(props) {",
				"\t \tsuper(props)",
				"\t }",
				"\t render() {$2 }",
			"}"
		],
		"description": "create react component"
	},
	"Import React": {
		"prefix": "imr",
		"body": [
			"import React from 'react';"
			
		],
		"description": "Import React"
	},
	"Import ReactDOM": {
		"prefix": "imrd",
		"body": [
			"import ReactDOM from 'react-dom';"
			
		],
		"description": "Import ReactDOM"
	},
	"Use ReactDOM": {
		"prefix": "rd",
		"body": [
			"ReactDOM.render($1, document.getElementById('$2'));"
			
		],
		"description": "Use ReactDOM"
	},
	"Import React Component": {
		"prefix": "imc",
		"body": [
			"import { $1 } from '$2';"
			
		],
		"description": "Import name React component"
	},
	"Import  Component": {
		"prefix": "im",
		"body": [
			"import $1 from '$2';"
			
		],
		"description": "Import default React component"
	},
	"Import  Bootstrap": {
		"prefix": "imb",
		"body": [
			"import { $1 } from 'react-bootstrap';"
			
		],
		"description": "Import bootstrap"
	},
	"Create functional component": {
		"prefix": "fc",
		"body": [
			"const $1 = () => (",
			"\t <div>$2</div>",
			")"
			
		],
		"description": "Create functional component"
	},
	"Create fucntion": {
		"prefix": "f",
		"body": [
			" $1 = ($2) => {",
			"\t $3",
			"}"
			
		],
		"description": "Create functional component"
	},
	"Create reducer": {
		"prefix": "cr",
		"body": [
			"const $1 = (state = $2, action) => {",
			"\tswitch (action.type) {",
			"\t\t default: { return state } ",
			"\t}",
			"}"
		],
		"description": "Create Reducer"
	},
	"Create reducer fucntion": {
		"prefix": "crf",
		"body": [
			"const $1 = ($2) => ({",
			"\t type:$3",
			"})"
		],
		"description": "Create reducer function"
	},
	"Create store dispatch": {
		"prefix": "sd",
		"body": [
			"store.dispatch()"
		],
		"description": "Create store dispatch"
	},
	"set state":{
		"prefix": "st",
		"body":[
			"this.setState(() => ({$1}))"
		],
		"description": "set state"
	},
	"if statment":{
		"prefix": "if",
		"body":[
			"if($1){$2}"
		],
		"description": "if statment"
	},
	"ternar operator":{
		"prefix": "tro",
		"body": ["$1 ? $2: $3"],
		"description": "ternar operator"
	},
	"create state":{
		"prefix":"state",
		"body": ["this.state = {$1}"],
		"description": "create state"
	}
}

